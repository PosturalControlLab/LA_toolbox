function [x,xi]=pseudogen3(n,fb,seed,ppdt)%% [x,xi]=pseudogen3(n,fb,seed,ppdt)%% Function to generate a pseudorandom ternary sequence.  The% number of shift registers is n (1x1), the feedback is defined% by fb (1xn), and starting values in the shift register are% given by seed (1xn) where seed has values of 0,1,or 2.%% For fb = [-1 1], then x(1) = rem(fb*seed',3), and if x(1)% is less than 0, the x(1) = x(1)+3.  For the final x output% substitute -1 for all 2's in the sequence.%% The vector xi contains the integration of x with ppdt "points% per delta t", i.e. each state of the shift register is divided% into ppdt intervals and the integration is computed at each of the% points.  %% Valid feedback combinations are defined in Davies (1970) for shift% register lengths from 2 to 7.  Davies gives a list of the "characteristic% polynomials" that define all valid feedback configurations for maximal% length sequences.  In order to translate these polynomials into the% feedback array, fb, needed for this program, do the following:%	1. The polynomial will always have one more digit than the number of%	   of feedback registers in the shift register.  The left-most digit %	   in the polynomial is always 1.  Ignore this digit.%	2. The remaining digits will be a sequence of 0's, 1's, or 2's.  In order%	   to translate this sequence into the values included in the variable%	   fb, change all 2's to 1's, change all 1's to -1's, leave all 0's 0's.%	   So for example, one characteristic polynomial for a 5 stage shift%	   register is 100211.  Ignoring the left-most digit leaves 00211.  This%	   translates into the fb values fb=[0 0 1 -1 -1] used by this Matlab function.%	3. The seed value can be any combination of 0's 1's or 2's.  The single %	   exception is that it cannot be all 0's.  Changing the seed value just%	   changes the starting point of the PRTS. So selecting the seed allows%	   you to change the symmetry of the integrated PRTS about zero.%% Examples of valid maximal length PRTS with 4, 5, 6, and 7 shift registers:%	[x,xi]=pseudogen3(4,[0 0 -1 1],[2 0 1 1],ppdt);	% 80 state sequence%	[x,xi]=pseudogen3(5,[0 0 1 -1 -1],[2 0 2 0 2],ppdt);	% 242 state sequence%	[x,xi]=pseudogen3(6,[1 0 1 1 1 1],[0 0 0 0 0 1],ppdt);	% 728 state sequence%   [x,x1]=pseudogen3(7,[0 0 0 -1 -1 -1 -1],[2 2 0 2 2 2 2],ppdt); % 2186 state sequence%   [x,x1]=pseudogen3(7,[0 0 0 -1 -1 -1 -1],[0 0 0 0 1 1 2],ppdt); % 2186 state sequenceshiftreg=seed;i=3^n-1;  % length of ternary sequencex=zeros(1,i);for j=1:i  x(j)=rem(fb*shiftreg',3);  if x(j)<0    x(j)=x(j)+3;  end  shiftreg=[x(j) shiftreg(1:(n-1))];  % shift to rightendfor j=1:i		%assign -1 to 2  if x(j)==2    x(j)=-1;  endend%% integrate the sequence with ppdt points per sequence value (i.e., state)%xi=zeros(1,ppdt*i);for j=1:i  for jj=1:ppdt    xi(jj+(j-1)*ppdt+1)=xi(jj+(j-1)*ppdt)+x(j);  endendxi=xi(1:ppdt*i); % get rid of last point which repeats first point